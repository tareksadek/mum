/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

import { clientsClaim, skipWaiting } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { NetworkFirst, CacheFirst, StaleWhileRevalidate } from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;

// Skip the waiting phase for the service worker
skipWaiting();
clientsClaim();

// Precache all of the assets generated by your build process
// Their URLs are injected into the manifest variable below
precacheAndRoute(self.__WB_MANIFEST);

// Cache First strategy for images
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images-v1',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
);

// Network first strategy for HTML pages (e.g., served by Next.js)
registerRoute(
  ({ request }) => request.mode === 'navigate',
  new NetworkFirst({
    cacheName: 'pages-v1',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 20,
        maxAgeSeconds: 24 * 60 * 60, // 24 hours
      }),
    ],
  })
);

// Stale-while-revalidate for CSS and JavaScript
registerRoute(
  ({ request }) =>
    request.destination === 'style' || request.destination === 'script',
  new StaleWhileRevalidate({
    cacheName: 'static-resources-v1',
  })
);

// Caching for Firebase Storage: Modify according to your paths and needs
registerRoute(
  ({ url }) =>
    url.origin === 'https://firebasestorage.googleapis.com' &&
    url.pathname.startsWith('/v0/b/muchmum-00.appspot.com'),
  new CacheFirst({
    cacheName: 'firebase-storage-v1',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 365 * 24 * 60 * 60, // 1 year
      }),
    ],
  })
);

// Optional: Adjust or add further caching strategies as needed

// This allows the web app to trigger skipWaiting via registration.waiting.postMessage({ type: 'SKIP_WAITING' })
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

